install.packages("htmltab")
install.packages("htmltools")
install.packages("htmltools")
library(htmltab)
library(htmltools)
source('~/RStudio/1_Teaching/spatial-analytics/01_LeafletBackgrounds.R')
source('~/RStudio/1_Teaching/spatial-analytics/01_LeafletBackgrounds.R')
library(htmltab)
source('~/RStudio/1_Teaching/spatial-analytics/01_LeafletBackgrounds.R')
AUSmap
save_html(AUSmap, "AUSmap.html")
# Save map as a html document (optional, replacement of pushing the export button)
# only works in root
library(htmlwidgets)
saveWidget(AUSmap, "AUSmap.html", selfcontained = TRUE)
source('~/RStudio/1_Teaching/spatial-analytics/02_LeafletHotsprings.R', encoding = 'UTF-8')
leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI Aerial") %>%
addCircleMarkers(data=springs.SP, group="Hot Springs", radius = 4, opacity=1, fill = "darkblue",stroke=TRUE,
fillOpacity = 0.75, weight=2, fillColor = "yellow",
popup = paste0("Spring Name: ", springs.SP$SpringName,
"<br> Temp_F: ", springs.SP$Temp_F,
"<br> Area: ", springs.SP$AREA)) %>%
addLayersControl(
baseGroups = c("Topo","ESRI Aerial", "Night"),
overlayGroups = c("Hot SPrings"),
options = layersControlOptions(collapsed = T))
springsmap <- leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldTopoMap", group = "Topo") %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI Aerial") %>%
addCircleMarkers(data=springs.SP, group="Hot Springs", radius = 4, opacity=1, fill = "darkblue",stroke=TRUE,
fillOpacity = 0.75, weight=2, fillColor = "yellow",
popup = paste0("Spring Name: ", springs.SP$SpringName,
"<br> Temp_F: ", springs.SP$Temp_F,
"<br> Area: ", springs.SP$AREA)) %>%
addLayersControl(
baseGroups = c("Topo","ESRI Aerial", "Night"),
overlayGroups = c("Hot SPrings"),
options = layersControlOptions(collapsed = T))
springsmap
source('~/RStudio/1_Teaching/spatial-analytics/03_LeafletMounds.R')
source('~/RStudio/1_Teaching/spatial-analytics/03_LeafletMounds.R')
popup = c("Robin", "Jakub", "Jannes")
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
#addProviderTiles("Esri.WorldImagery") %>%
addAwesomeMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
leaflet() %>%
addProviderTiles("Esri.WorldPhysical") %>%
addProviderTiles("Esri.WorldImagery") %>%
addAwesomeMarkers(lng = c(-3, 23, 11),
lat = c(52, 53, 49),
popup = popup)
leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldImagery",
options = providerTileOptions(opacity=0.5)) %>%
setView(lng = 151.005006, lat = -33.9767231, zoom = 10)
leaflet() %>%
addTiles() %>%
setView( lng = 2.34, lat = 48.85, zoom = 5 ) %>%
addProviderTiles("Esri.WorldPhysical", group = "Physical") %>%
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%
addProviderTiles("MtbMap", group = "Geo") %>%
addLayersControl(
baseGroups = c("Geo","Aerial", "Physical"),
options = layersControlOptions(collapsed = T))
leaflet() %>%
setView(151.2339084, -33.85089, zoom = 13) %>%
addTiles()  # checking I am in the right area
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_aus <- l_aus %>% addProviderTiles(provider, group = provider)
}
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
addControl("", position = "topright")
library(leaflet)
library(htmltools)
library(htmlwidgets)
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")
addControl("", position = "topright")
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
# htmlwidgets::onRender("
#                       function(el, x) {
#                       var myMap = this;
#                       myMap.on('baselayerchange',
#                       function (e) {
#                       myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
#                       })
#                       }")
addControl("", position = "topright")
l_aus <- leaflet() %>%   # assign the base location to an object
setView(151.2339084, -33.85089, zoom = 13)
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_aus <- l_aus %>% addProviderTiles(provider, group = provider)
}
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
# htmlwidgets::onRender("
#                       function(el, x) {
#                       var myMap = this;
#                       myMap.on('baselayerchange',
#                       function (e) {
#                       myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
#                       })
#                       }")
addControl("", position = "topright")
AUSmap
AUSmap <- l_aus %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
AUSmap
library(htmlwidgets)
saveWidget(AUSmap, "AUSmap.html", selfcontained = TRUE)
AUSmap
l_dk <- leaflet() %>%   # assign the base location to an object
setView(11, 56, zoom = 7)
#l_dk %>% addTiles()
esri <- grep("^Esri", providers, value = TRUE)
for (provider in esri) {
l_dk <- l_dk %>% addProviderTiles(provider, group = provider)
}
# l_dk
# Create the map
MapDK <- l_dk %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>%
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>%
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}")%>%
addControl("", position = "topright")
MapDK
library(tidyverse)
library(googlesheets4)
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=0",col_types = "cccnncn")
library(googlesheets4)
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=0",col_types = "cccnncn")
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=0",col_types = "cccnncn")
glimpse(places)
places %>% filter(!is.na(Longitude))
places <- places %>% filter(!is.na(Longitude))
leaflet() %>%
addTiles() %>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description)
MapDK %>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description)
MapDK %>%
addCircleMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description)
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit#gid=0",col_types = "cccnncn")
MapDK %>%
addCircleMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description,
clusterOptions = markerClusterOptions())
places <- places %>% filter(!is.na(Longitude))
gs4_oauth_app()
gs4_auth_configure()
gs4_token()
gs4_auth_configure()
gs4_has_token()
places <- places %>% filter(!is.na(Longitude) && !is.na(Latitude))
MapDK %>%
addCircleMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = places$Description,
clusterOptions = markerClusterOptions())
